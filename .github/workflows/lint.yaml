name: Lint

on: [push, pull_request]
concurrency: lint-${{ github.sha }}

jobs:
  lint:
    runs-on: ubuntu-latest

    env:
      PIP_CACHE_DIR: /tmp/pip-cache-dir
      POETRY_CACHE_DIR: /tmp/pip-cache-dir

    steps:
      - name: Checks out repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # 4.1.7

      - name: Set up Python 3.12
        id: python
        uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f # 5.1.1
        with:
          python-version: "3.12"

      # This step caches our Python dependencies. To make sure we
      # only restore a cache when the dependencies, the python version and
      # the runner operating system we create a cache key
      # that is a composite of those states.
      # Only when the context is exactly the same, we will restore the cache.
      - name: Restore pip cache
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # 4.0.2
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: "python-0-${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{ hashFiles('./pyproject.toml', './poetry.lock') }}"

      - name: Install dependencies
        run: |
          pip install poetry flake8
          poetry install

      # We will not run `black` or `flake8` here, as we will use a separate
      # black and flake8 action. As pre-commit does not support user installs,
      # we set PIP_USER=0 to not do a user install.
      - name: Run pre-commit hooks
        id: pre-commit
        run: PIP_USER=0 SKIP="black,flake8" poetry run pre-commit run --all-files

      # Run flake8 and have it format the linting errors in the format of
      # the GitHub Workflow command to register error annotations. This
      # means that our flake8 output is automatically added as an error
      # annotation to both the run result and in the "Files" tab of a
      # pull request.
      #
      # Format used:
      # ::error file={filename},line={line},col={col}::{message}
      - name: Run flake8
        # this check ensures that black always runs if the pre-commit step ran
        # Its best to only have to fix pre-commit once than twice
        if: always() && (steps.pre-commit.outcome == 'success' || steps.pre-commit.outcome == 'failure')
        run: "flake8 --config tox.ini --format='::error file=%(path)s,line=%(row)d,col=%(col)d::[flake8] %(code)s: %(text)s'"

      # Run black
      - name: Run black
        # see flake8's comment above
        if: always() && (steps.pre-commit.outcome == 'success' || steps.pre-commit.outcome == 'failure')
        run: poetry run black . --check --diff --target-version py311
